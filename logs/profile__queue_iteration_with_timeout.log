Wrote profile results to rmq2psql_p.py.lprof
Timer unit: 1e-06 s

Total time: 0.0681852 s
File: ./rmq2psql_p.py
Function: ujson at line 52

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    52                                                   @profile
    53                                                   async def ujson(self, message_decoded: str) -> Tuple[str, int]:
    54     10000      58537.3      5.9     85.9              msg: dict = ujson.loads(message_decoded)
    55     10000       9647.9      1.0     14.1              return msg['content'], msg['message_number']

Total time: 0.0342834 s
File: ./rmq2psql_p.py
Function: orjson at line 57

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    57                                                   @profile
    58                                                   async def orjson(self, message_decoded: str) -> Tuple[str, int]:
    59     10000      28421.1      2.8     82.9              msg: dict = orjson.loads(message_decoded)
    60     10000       5862.3      0.6     17.1              return msg['content'], msg['message_number']

Total time: 0.033301 s
File: ./rmq2psql_p.py
Function: msgspec at line 62

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    62                                                   @profile
    63                                                   async def msgspec(self, message_decoded: str) -> Tuple[str, int]:
    64     10000      26422.0      2.6     79.3              msg: dict = msgspec.json.decode(message_decoded)
    65     10000       6879.0      0.7     20.7              return msg['content'], msg['message_number']

Total time: 0.0253965 s
File: ./rmq2psql_p.py
Function: msgspec_struct at line 67

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    67                                                   @profile
    68                                                   async def msgspec_struct(self, message_decoded: str) -> Tuple[str, int]:
    69     10000      19657.4      2.0     77.4              msg = msgspec.json.decode(message_decoded, type=Message)
    70     10000       5739.1      0.6     22.6              return msg.content, msg.message_number

Total time: 0.643748 s
File: ./rmq2psql_p.py
Function: rmq_callback at line 73

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    73                                               @profile
    74                                               async def rmq_callback(
    75                                                       self, 
    76                                                       message: aio_pika.IncomingMessage = None,
    77                                                       flush: bool = False
    78                                               ) -> None:
    79     10001       5056.4      0.5      0.8          if not flush:
    80     10000       7457.5      0.7      1.2              message_decoded = message.body.decode()
    81                                           
    82     10000       6702.7      0.7      1.0              if self.json == 'all':
    83     50000      22421.1      0.4      3.5                  for method_name in self.json_methods:
    84     40000      22508.0      0.6      3.5                      content, message_number = \
    85    120000     450112.9      3.8     69.9                      await getattr(self.json_processor, 
    86     80000      21250.4      0.3      3.3                                    method_name)(message_decoded)
    87                                                       else:  
    88                                                           content, message_number = await getattr(self.json_processor, 
    89                                                                                             self.json)(message_decoded)
    90                                           
    91     10000       5191.8      0.5      0.8              self.bulk_messages.append((content, message_number))
    92     10000       4438.3      0.4      0.7              self.bulk_counter += 1
    93                                           
    94     10001       6235.4      0.6      1.0          if self.bulk_counter >= self.max_bulks or (
    95      9901      20579.2      2.1      3.2                  flush and self.bulk_counter):
    96       200      10607.6     53.0      1.6              async with self.pgpool.acquire() as connection:
    97       200      26888.0    134.4      4.2                  async with connection.transaction():
    98       200      32913.3    164.6      5.1                      await connection.executemany(
    99       200        257.6      1.3      0.0                          f"INSERT INTO {self.table_name} " + 
   100       100         45.4      0.5      0.0                           "(content, message_number) VALUES ($1, $2)",
   101       100         30.9      0.3      0.0                                  self.bulk_messages)
   102       100        986.2      9.9      0.2                      self.bulk_messages = []
   103       100         65.1      0.7      0.0                      self.bulk_counter = 0 

Total time: 2.3608 s
File: ./rmq2psql_p.py
Function: main at line 105

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   105                                               @profile
   106                                               async def main(self) -> None:
   107         2       7017.9   3508.9      0.3          self.pgpool = await asyncpg.create_pool(
   108         1          1.0      1.0      0.0                                  host=self.host, port=self.sql_port,
   109         1          0.4      0.4      0.0                                  user=self.user, password=self.password, 
   110         1          0.3      0.3      0.0                                  database=self.db_name)
   111         2        489.3    244.6      0.0          connection = await aio_pika.connect_robust(
   112         1          1.2      1.2      0.0                                  host=self.host, port=self.rmq_port,
   113         1          0.6      0.6      0.0                                  login=self.user, password=self.password, 
   114         1          0.5      0.5      0.0                                  virtualhost=self.vhost)
   115                                           
   116         2         56.1     28.1      0.0          async with connection:
   117         1        396.5    396.5      0.0              channel = await connection.channel()     
   118         1          1.7      1.7      0.0              if self.loop_type != 'message_processing':
   119         1         72.7     72.7      0.0                  await channel.set_qos(prefetch_count=self.max_bulks)
   120         1        174.2    174.2      0.0              queue = await channel.declare_queue(self.queue_name, durable=True)
   121                                           
   122         1          1.5      1.5      0.0              if self.loop_type == 'message_processing':
   123                                                           async for message in queue:
   124                                                               async with message.process():
   125                                                                   await self.rmq_callback(message=message)
   126                                                                   self.read_counter += 1
   127                                                                   if self.read_counter >= self.max_reads:
   128                                                                       break
   129                                                       else:
   130         1          0.9      0.9      0.0                  if self.loop_type == 'queue_iteration_with_timeout':
   131         1         31.3     31.3      0.0                      queue_iterator_impl = queue.iterator(timeout=0.1)
   132         1          0.6      0.6      0.0                  if self.loop_type == 'queue_iteration_without_timeout':
   133                                                               queue_iterator_impl = queue.iterator()
   134         1          0.3      0.3      0.0                  try:
   135         2        448.9    224.4      0.0                      async with queue_iterator_impl as queue_iter:
   136     10000     551510.9     55.2     23.4                          async for message in queue_iter:
   137     20000     936812.3     46.8     39.7                              async with message.process():
   138     10000     853598.7     85.4     36.2                                  await self.rmq_callback(message=message) 
   139     10000       4926.2      0.5      0.2                                  self.read_counter += 1
   140     10000       5234.8      0.5      0.2                                  if self.read_counter >= self.max_reads:
   141         1          0.3      0.3      0.0                                      break
   142                                                           except asyncio.TimeoutError:
   143                                                               print("Exit: no more messages during timeout")
   144                                           
   145         1         21.2     21.2      0.0          await self.rmq_callback(flush=True)

